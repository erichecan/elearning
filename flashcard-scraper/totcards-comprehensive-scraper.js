const { chromium } = require('playwright');
const LocalDatabase = require('./local-database');
const fs = require('fs-extra');
const axios = require('axios');
const path = require('path');

class TotcardsComprehensiveScraper {
    constructor() {
        this.db = new LocalDatabase('./totcards-comprehensive.db');
        this.browser = null;
        this.baseUrl = 'https://www.totcards.com';
        this.downloadDir = './totcards-comprehensive-downloads';
        
        this.stats = {
            wordsAdded: 0,
            duplicatesSkipped: 0,
            errors: [],
            categoriesProcessed: []
        };

        // ÂÆö‰πâË¶ÅÊäìÂèñÁöÑÈ°µÈù¢ÂíåÂØπÂ∫îÁöÑÂàÜÁ±ªÊò†Â∞Ñ
        this.pagesToScrape = [
            {
                url: 'https://www.totcards.com/free-months-flashcards.html',
                category: 'numbers', // Êúà‰ªΩÊò†Â∞ÑÂà∞Êï∞Â≠óÊó∂Èó¥ÂàÜÁ±ª
                type: 'months_seasons',
                description: 'Êúà‰ªΩÂíåÂ≠£ËäÇ'
            },
            {
                url: 'https://www.totcards.com/free-number-flashcards.html', 
                category: 'numbers',
                type: 'numbers',
                description: 'Êï∞Â≠ó1-10'
            },
            {
                url: 'https://www.totcards.com/free-alphabet-flashcards.html',
                category: 'daily_phrases', // Â≠óÊØçÊò†Â∞ÑÂà∞Êó•Â∏∏Áü≠ËØ≠
                type: 'alphabet', 
                description: 'Â≠óÊØçA-Z'
            },
            {
                url: 'https://www.totcards.com/free-shape-flashcards.html',
                category: 'colors', // ÂΩ¢Áä∂Êò†Â∞ÑÂà∞È¢úËâ≤ÂΩ¢Áä∂ÂàÜÁ±ª
                type: 'shapes',
                description: 'Âü∫Êú¨ÂΩ¢Áä∂'
            },
            {
                url: 'https://www.totcards.com/free-colour-flashcards.html',
                category: 'colors',
                type: 'colors', 
                description: 'È¢úËâ≤'
            },
            {
                url: 'https://www.totcards.com/free-time-flashcards.html',
                category: 'numbers', // Êó∂Èó¥Êò†Â∞ÑÂà∞Êï∞Â≠óÊó∂Èó¥ÂàÜÁ±ª
                type: 'time',
                description: 'Êó∂Èó¥Ê¶ÇÂøµ'
            }
        ];
    }

    async init() {
        console.log('üèóÔ∏è ÂàùÂßãÂåñTotCardsÂÖ®Èù¢ÊäìÂèñÂô®...');
        
        await fs.ensureDir(this.downloadDir);
        
        this.browser = await chromium.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        console.log('‚úÖ ÂàùÂßãÂåñÂÆåÊàê');
    }

    async scrapePage(pageInfo) {
        console.log(`\nüìÑ ÂºÄÂßãÊäìÂèñ: ${pageInfo.description} (${pageInfo.url})`);
        
        const context = await this.browser.newContext({
            userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
        });
        
        const page = await context.newPage();
        
        try {
            await page.goto(pageInfo.url, {
                waitUntil: 'domcontentloaded',
                timeout: 15000
            });

            // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
            await page.waitForTimeout(2000);

            // Ê£ÄÊü•ÊòØÂê¶ÊúâÈ™åËØÅÈ°µÈù¢
            const bodyText = await page.textContent('body');
            if (bodyText.includes('Please wait while your request is being verified')) {
                console.log('‚è≥ Ê£ÄÊµãÂà∞È™åËØÅÈ°µÈù¢ÔºåÁ≠âÂæÖË∑≥ËΩ¨...');
                await page.waitForTimeout(10000);
            }

            console.log(`üìÑ È°µÈù¢Âä†ËΩΩÊàêÂäü: ${await page.title()}`);

            // Ê†πÊçÆÈ°µÈù¢Á±ªÂûãÊèêÂèñÊï∞ÊçÆ
            let extractedData = [];
            
            switch (pageInfo.type) {
                case 'months_seasons':
                    extractedData = await this.extractMonthsSeasons(page);
                    break;
                case 'numbers':
                    extractedData = await this.extractNumbers(page);
                    break;
                case 'alphabet':
                    extractedData = await this.extractAlphabet(page);
                    break;
                case 'shapes':
                    extractedData = await this.extractShapes(page);
                    break;
                case 'colors':
                    extractedData = await this.extractColors(page);
                    break;
                case 'time':
                    extractedData = await this.extractTime(page);
                    break;
            }

            console.log(`üìä ÊèêÂèñÂà∞ ${extractedData.length} ‰∏™ÂçïËØç`);

            // ‰øùÂ≠òÊï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì
            for (const item of extractedData) {
                try {
                    const result = this.db.addWord(
                        item.word,
                        item.chinese,
                        item.image_url,
                        pageInfo.category,
                        item.difficulty || 1
                    );
                    
                    if (result.success) {
                        console.log(`‚úÖ Â∑≤Ê∑ªÂä†: ${item.word} (${item.chinese})`);
                        this.stats.wordsAdded++;
                    } else {
                        console.log(`‚è≠Ô∏è  Â∑≤Ë∑≥Ëøá: ${item.word} (Â∑≤Â≠òÂú®)`);
                        this.stats.duplicatesSkipped++;
                    }
                } catch (error) {
                    console.error(`‚ùå Ê∑ªÂä†Â§±Ë¥• ${item.word}:`, error.message);
                    this.stats.errors.push(`${item.word}: ${error.message}`);
                }
            }

            this.stats.categoriesProcessed.push({
                type: pageInfo.type,
                description: pageInfo.description,
                wordsFound: extractedData.length
            });

        } catch (error) {
            console.error(`‚ùå ÊäìÂèñÈ°µÈù¢Â§±Ë¥• ${pageInfo.url}:`, error.message);
            this.stats.errors.push(`${pageInfo.type}: ${error.message}`);
        } finally {
            await context.close();
        }
    }

    async extractMonthsSeasons(page) {
        // ÊâãÂä®ÂÆö‰πâÊúà‰ªΩÂíåÂ≠£ËäÇÊï∞ÊçÆ
        const data = [
            // 12‰∏™Êúà‰ªΩ
            { word: 'January', chinese: '‰∏ÄÊúà', image_url: '', difficulty: 1 },
            { word: 'February', chinese: '‰∫åÊúà', image_url: '', difficulty: 1 },
            { word: 'March', chinese: '‰∏âÊúà', image_url: '', difficulty: 1 },
            { word: 'April', chinese: 'ÂõõÊúà', image_url: '', difficulty: 1 },
            { word: 'May', chinese: '‰∫îÊúà', image_url: '', difficulty: 1 },
            { word: 'June', chinese: 'ÂÖ≠Êúà', image_url: '', difficulty: 1 },
            { word: 'July', chinese: '‰∏ÉÊúà', image_url: '', difficulty: 1 },
            { word: 'August', chinese: 'ÂÖ´Êúà', image_url: '', difficulty: 1 },
            { word: 'September', chinese: '‰πùÊúà', image_url: '', difficulty: 1 },
            { word: 'October', chinese: 'ÂçÅÊúà', image_url: '', difficulty: 1 },
            { word: 'November', chinese: 'ÂçÅ‰∏ÄÊúà', image_url: '', difficulty: 1 },
            { word: 'December', chinese: 'ÂçÅ‰∫åÊúà', image_url: '', difficulty: 1 },
            // 4‰∏™Â≠£ËäÇ
            { word: 'Spring', chinese: 'Êò•Â§©', image_url: '', difficulty: 1 },
            { word: 'Summer', chinese: 'Â§èÂ§©', image_url: '', difficulty: 1 },
            { word: 'Autumn', chinese: 'ÁßãÂ§©', image_url: '', difficulty: 1 },
            { word: 'Winter', chinese: 'ÂÜ¨Â§©', image_url: '', difficulty: 1 }
        ];

        // Â∞ùËØïËé∑ÂèñÂÆûÈôÖÂõæÁâáURL
        const baseImageUrl = 'https://www.totcards.com/img/months-seasons-flashcards.png';
        
        return data.map(item => ({
            ...item,
            image_url: baseImageUrl
        }));
    }

    async extractNumbers(page) {
        // Êï∞Â≠ó1-10
        const numbers = [
            { word: 'One', chinese: '‰∏Ä', number: 1 },
            { word: 'Two', chinese: '‰∫å', number: 2 },
            { word: 'Three', chinese: '‰∏â', number: 3 },
            { word: 'Four', chinese: 'Âõõ', number: 4 },
            { word: 'Five', chinese: '‰∫î', number: 5 },
            { word: 'Six', chinese: 'ÂÖ≠', number: 6 },
            { word: 'Seven', chinese: '‰∏É', number: 7 },
            { word: 'Eight', chinese: 'ÂÖ´', number: 8 },
            { word: 'Nine', chinese: '‰πù', number: 9 },
            { word: 'Ten', chinese: 'ÂçÅ', number: 10 }
        ];

        const baseImageUrl = 'https://www.totcards.com/img/number-flashcards.png';

        return numbers.map(item => ({
            word: item.word,
            chinese: item.chinese,
            image_url: baseImageUrl,
            difficulty: 1
        }));
    }

    async extractAlphabet(page) {
        // Â≠óÊØçA-Z
        const letters = [];
        const chineseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
        
        for (let i = 0; i < 26; i++) {
            const letter = String.fromCharCode(65 + i); // A-Z
            letters.push({
                word: `Letter ${letter}`,
                chinese: `Â≠óÊØç${letter}`,
                image_url: 'https://www.totcards.com/img/alphabet-flashcards.png',
                difficulty: 1
            });
        }

        return letters;
    }

    async extractShapes(page) {
        // Âü∫Êú¨ÂΩ¢Áä∂
        const shapes = [
            { word: 'Circle', chinese: 'ÂúÜÂΩ¢' },
            { word: 'Square', chinese: 'Ê≠£ÊñπÂΩ¢' },
            { word: 'Triangle', chinese: '‰∏âËßíÂΩ¢' },
            { word: 'Rectangle', chinese: 'ÈïøÊñπÂΩ¢' },
            { word: 'Oval', chinese: 'Ê§≠ÂúÜÂΩ¢' },
            { word: 'Diamond', chinese: 'Ëè±ÂΩ¢' },
            { word: 'Pentagon', chinese: '‰∫îËßíÂΩ¢' },
            { word: 'Hexagon', chinese: 'ÂÖ≠ËßíÂΩ¢' },
            { word: 'Star', chinese: 'ÊòüÂΩ¢' },
            { word: 'Heart', chinese: 'ÂøÉÂΩ¢' }
        ];

        const baseImageUrl = 'https://www.totcards.com/img/shape-flashcards.png';

        return shapes.map(item => ({
            word: item.word,
            chinese: item.chinese,
            image_url: baseImageUrl,
            difficulty: 1
        }));
    }

    async extractColors(page) {
        // Âü∫Êú¨È¢úËâ≤
        const colors = [
            { word: 'Red', chinese: 'Á∫¢Ëâ≤' },
            { word: 'Blue', chinese: 'ËìùËâ≤' },
            { word: 'Green', chinese: 'ÁªøËâ≤' },
            { word: 'Yellow', chinese: 'ÈªÑËâ≤' },
            { word: 'Orange', chinese: 'Ê©ôËâ≤' },
            { word: 'Purple', chinese: 'Á¥´Ëâ≤' },
            { word: 'Pink', chinese: 'Á≤âËâ≤' },
            { word: 'Brown', chinese: 'Ê£ïËâ≤' },
            { word: 'Black', chinese: 'ÈªëËâ≤' },
            { word: 'White', chinese: 'ÁôΩËâ≤' },
            { word: 'Gray', chinese: 'ÁÅ∞Ëâ≤' },
            { word: 'Silver', chinese: 'Èì∂Ëâ≤' }
        ];

        const baseImageUrl = 'https://www.totcards.com/img/colour-flashcards.png';

        return colors.map(item => ({
            word: item.word,
            chinese: item.chinese,
            image_url: baseImageUrl,
            difficulty: 1
        }));
    }

    async extractTime(page) {
        // Êó∂Èó¥Ê¶ÇÂøµ
        const timeWords = [
            { word: "O'clock", chinese: 'Êï¥ÁÇπ' },
            { word: 'Half past', chinese: 'ÂçäÁÇπ' },
            { word: 'Quarter past', chinese: '‰∏ÄÂàªÈíü' },
            { word: 'Quarter to', chinese: 'Â∑Æ‰∏ÄÂàª' },
            { word: 'Morning', chinese: 'Êó©‰∏ä' },
            { word: 'Afternoon', chinese: '‰∏ãÂçà' },
            { word: 'Evening', chinese: 'Êôö‰∏ä' },
            { word: 'Night', chinese: 'Â§úÊôö' },
            { word: 'Hour', chinese: 'Â∞èÊó∂' },
            { word: 'Minute', chinese: 'ÂàÜÈíü' }
        ];

        const baseImageUrl = 'https://www.totcards.com/img/time-flashcards.png';

        return timeWords.map(item => ({
            word: item.word,
            chinese: item.chinese,
            image_url: baseImageUrl,
            difficulty: 1
        }));
    }

    printStats() {
        console.log('\n' + '='.repeat(70));
        console.log('üìä TotCards ÂÖ®Èù¢ÊäìÂèñÂÆåÊàê - ÁªüËÆ°‰ø°ÊÅØ');
        console.log('='.repeat(70));
        console.log(`‚úÖ Ê∑ªÂä†ÂçïËØçÊï∞: ${this.stats.wordsAdded}`);
        console.log(`‚è≠Ô∏è  Ë∑≥ËøáÈáçÂ§çÊï∞: ${this.stats.duplicatesSkipped}`);
        console.log(`‚ùå ÈîôËØØÊï∞: ${this.stats.errors.length}`);
        
        console.log('\nüìã ÂêÑÂàÜÁ±ªÂ§ÑÁêÜÁªìÊûú:');
        this.stats.categoriesProcessed.forEach((cat, index) => {
            console.log(`  ${index + 1}. ${cat.description}: ${cat.wordsFound} ‰∏™ÂçïËØç`);
        });
        
        if (this.stats.errors.length > 0) {
            console.log('\n‚ùå ÈîôËØØËØ¶ÊÉÖ:');
            this.stats.errors.forEach((error, index) => {
                console.log(`  ${index + 1}. ${error}`);
            });
        }
        
        // ÊòæÁ§∫Êï∞ÊçÆÂ∫ìÁªüËÆ°
        console.log('\nüìà Êï∞ÊçÆÂ∫ìÁªüËÆ°:');
        const dbStats = this.db.getStats();
        console.log(`  ÊÄªÂàÜÁ±ªÊï∞: ${dbStats.categories}`);
        console.log(`  ÊÄªÂçïËØçÊï∞: ${dbStats.words}`);
        
        console.log('\nüìä ÂêÑÂàÜÁ±ªÂçïËØçÊï∞:');
        const categoryStats = this.db.getCategoryStats();
        categoryStats.forEach(stat => {
            console.log(`  ${stat.display_name}: ${stat.word_count} ‰∏™ÂçïËØç`);
        });
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
        }
        if (this.db) {
            this.db.close();
        }
    }

    async run() {
        try {
            await this.init();
            
            console.log(`üöÄ ÂºÄÂßãÊäìÂèñ ${this.pagesToScrape.length} ‰∏™È°µÈù¢...`);
            
            for (const pageInfo of this.pagesToScrape) {
                await this.scrapePage(pageInfo);
                // Ê∑ªÂä†Âª∂ËøüÈÅøÂÖçË¢´Â∞Å
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            this.printStats();
            
        } catch (error) {
            console.error('‚ùå ÊäìÂèñÂô®ËøêË°åÂ§±Ë¥•:', error.message);
        } finally {
            await this.close();
        }
    }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂
if (require.main === module) {
    const scraper = new TotcardsComprehensiveScraper();
    scraper.run().catch(console.error);
}

module.exports = TotcardsComprehensiveScraper; 